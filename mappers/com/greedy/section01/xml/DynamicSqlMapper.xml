<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <!-- 
 mapper를 DAO 인터페이스와 동일한 패키지에 두고 DAO 인터페이스의 풀네임을 namespace로 지정한다.
 또한 매퍼 인터페이스와 XML의 이름이 동일해야한다. 
 작성한 메소드의 이름과 id가 일치하며 리턴 타입이 일치하는 쿼리문을 모두 작성해야 한다.
 -->
<mapper namespace="com.greedy.section01.xml.DynamicSqlMapper">

<!-- 조회한 결과를 dto와 매핑 시키기위한 설정으로 resultmap을 선언한다. -->
<resultMap type="com.greedy.common.MenuDTO" id="menuResultMap">
	<id property="menuCode" column="MENU_CODE"/>
	<result property="menuName" column="MENU_NAME"/>
	<result property="menuPrice" column="MENU_PRICE"/>
	<result property="categoryCode" column="CATEGORY_CODE"/>
	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
</resultMap>

  <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
    SELECT
    		MENU_CODE
    		,MENU_NAME
    		,MENU_PRICE
    		,CATEGORY_CODE
    		,ORDERABLE_STATUS
      FROM TBL_MENU
      WHERE ORDERABLE_STATUS = 'Y'
      <if test="price gte 0 and price lte 10000">
      <![CDATA[ 
      	AND MENU_PRICE < #{ price } 
      ]]>
      </if>
      <if test="price gt 10000 and price lte 20000">
       AND MENU_PRICE BETWEEN 10000 AND #{ price }
      </if>
      <if test="price gt 20000 and price lte 30000">
       AND MENU_PRICE BETWEEN 20000 AND #{ price }
	  </if>
	  <if test="price gt 30000">
       AND MENU_PRICE BETWEEN 30000 AND #{ price }
	  </if>
	ORDER BY MENU_CODE 
  </select>
  
  <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap" >
    SELECT
    		MENU_CODE
    		,MENU_NAME
    		,MENU_PRICE
    		,CATEGORY_NAME
    		,ORDERABLE_STATUS
      FROM TBL_MENU
      <if test="condition == 'category'">
	  JOIN TBL_CATEGORY USING(CATEGORY_CODE)    	
      </if>
      WHERE ORDERABLE_STATUS = 'Y'
      <if test="condition == 'name'">
      	AND MENU_NAME LIKE '%' || #{value} || '%'
      </if>
      <if test="condition == 'category'">
      	AND CATEGORY_NAME  = #{value}
      </if>
      ORDER BY MENU_CODE
      
  </select>
  
  <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap" >
    SELECT
    		MENU_CODE
    		,MENU_NAME
    		,MENU_PRICE
    		,CATEGORY_CODE
    		,ORDERABLE_STATUS
      FROM TBL_MENU
      WHERE ORDERABLE_STATUS = 'Y'
      <choose>
      	<when test="value == '식사'">
         AND CATEGORY_CODE IN (4,5,6,7)
      	</when>
      	<when test="value == '음료'">
      	AND CATEGORY_CODE IN (8,9,10)
      	</when>
      	<otherwise>
      	AND CATEGORY_CODE IN (11,12)
      	</otherwise>
      </choose>
      ORDER BY MENU_CODE
  </select>
  
  <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap" >
  	   SELECT
    		MENU_CODE
    		,MENU_NAME
    		,MENU_PRICE
    		,CATEGORY_CODE
    		,ORDERABLE_STATUS
      FROM TBL_MENU
      WHERE ORDERABLE_STATUS = 'Y'
        AND MENU_CODE IN
      <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator="," close=")">
      	#{menuCode}
      </foreach>
  </select>
  
    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap" >
  	   SELECT
    		MENU_CODE
    		,MENU_NAME
    		,MENU_PRICE
    		,CATEGORY_CODE
    		,ORDERABLE_STATUS
      FROM TBL_MENU
<!--  <if test="nameValue != null">
      WHERE MENU_NAME LIKE '%' || #{nameValue} || '%'
 	  </if>
 	  <if test="categoryValue != null">
 	   AND CATEGORY_CODE = #{categoryValue}
 	  </if> 
-->	
	  <!--  
	  	해결 방법 
	  	1.<where> 태그를 사용한다. 
	  where 태그는 앞에  where구문이 없으면 자동으로 구문을 붙여준다. 
	  또한 where 내부에 모두 쿼리문이 추가되지 않는 상황인 경우에는 where을 무시한다. 
	  and나 or로 시작하게 되면 자동으로 해당 단어를 지워준다. 
	  -->
	  
<!--  <where>
	  <if test="nameValue != null">
	  MENU_NAME LIKE '%' || #{nameValue} || '%'
 	  </if>
 	  <if test="categoryValue != null">
 	  CATEGORY_CODE = #{categoryValue}
 	  </if> 
	  </where> 
-->
	  
	  <!-- 
	  	해결 방법
	    2. <trim> 태그를 사용한다. 
      	   조회 조건에 and 혹은 or로 시작하지 않는 다른 문자로 시작하는 경우 
      	   where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
      	   prefix : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용을 기술한다.
      	   prefixOverrides : 처리 후 엘리먼트의 내용 중 가장 앞에 해당하는 문자들이 있다면 자동으로 지워준다.
      	   suffix : 처리 후 엘리먼트 내에 내용이 있으면 가장 뒤에 붙여준다.
      	   suffixOverrides : 처리 후 엘리먼트 내용 중 가장 뒤에 해당 문자들이 있다면 자동으로 지워준다.

	  -->
	  <trim prefix="WHERE" prefixOverrides="AND | OR">
		  <if test="nameValue != null">
		  MENU_NAME LIKE '%' || #{nameValue} || '%'
	 	  </if>
	 	  <if test="categoryValue != null">
	 	  CATEGORY_CODE = #{categoryValue}
	 	  </if> 
	  </trim>
  </select>
  
  
  <update id="modifyMenu" parameterType="hashmap">
<!--   	UPDATE
  	       TBL_MENU
    <if test="name != null and name != ''">
  	   SET MENU_NAME = #{ name }    
    </if>
    <if test="categoryCode != null and categoryCode gt 0">
         , CATEGORY_CODE = #{ categoryCode }    
    </if>
	<if test="orderableStatus != null and orderableStatus != ''">
         , ORDERABLE_STATUS = #{ orderableStatus }
    </if>
     WHERE MENU_CODE = #{ code }   -->
     
     <!-- 해결 방법 1. <set> 엘리먼트 사용
          <set> 엘리먼트 내부에 내용이 있을 시 set 구문을 자동으로 추가해 준다.
          앞 또는 뒤에 붙은 콤마를 제거해준다.
      -->
<!--     UPDATE
  	       TBL_MENU
  	<set>
	    <if test="name != null and name != ''">
	  	   MENU_NAME = #{ name }    
	    </if>
	    <if test="categoryCode != null and categoryCode gt 0">
	         , CATEGORY_CODE = #{ categoryCode }    
	    </if>
		<if test="orderableStatus != null and orderableStatus != ''">
	         , ORDERABLE_STATUS = #{ orderableStatus }
	    </if>
    </set>
     WHERE MENU_CODE = #{ code }   -->
     
     <!-- 해결 방법 2. <trim> 엘리먼트 사용 -->
    UPDATE
  	       TBL_MENU
  	<trim prefix="SET" prefixOverrides=",">
	    <if test="name != null and name != ''">
	  	   MENU_NAME = #{ name }    
	    </if>
	    <if test="categoryCode != null and categoryCode gt 0">
	         , CATEGORY_CODE = #{ categoryCode }    
	    </if>
		<if test="orderableStatus != null and orderableStatus != ''">
	         , ORDERABLE_STATUS = #{ orderableStatus }
	    </if>
    </trim>
     WHERE MENU_CODE = #{ code }  
  </update>

  
  

 
</mapper>